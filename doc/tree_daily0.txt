// tree_daily0.txt
// hyan23 编辑。
//

2016.08.01
1. 系统稳定性测试。
2. 稳定性测试ok。
3. 关于处理程序异常的思路:
可以假装从中断返回以恢复架构，
调用系统调用移除任务。
4. src/nasm/utility/queue.bin。(已调试)。
5. src/nasm/utility/stack.bin。(已调试)。
6. src/nasm/utility/array.bin。(已调试)。
7. src/nasm/utility/linked.bin。(已调试)。
8. 清理磁盘，调整扇区。

2016.08.02
1. kernel/wnd/desktop.bin。
2. 考虑为什么需要标准错误流。
3. kernel/wnd/window.bin。
4. 窗口创建, 窗口链。

2016.08.03
1. kernel/wnd/msgq.bin。消息队列同步。
2. kernel/wnd/link.bin。窗口链同步。
3. src/nasm/utility/spin.bin。标准自旋锁。
4. 已知问题: 应用程序数据段可访问的
界限比实际定义的数据界限+1。
5. 修复链表第一个节点删除出错。
6. 已知问题:　VirtualBox多任务环境，CreateProcess调用，
在某些情况下影响系统运行。原因未知。(2016.08.06解决)
7. 窗口位移，窗口层次，焦点窗口。
8. 已知问题: 图形库不支持在负位置绘制。(当天)
９. 已知问题: 控制台快速TREE_EXIT无法唤醒sh。(不再出现)

2016.08.04
1. 整理代码kernel/graphic, kernel/wnd。
2. 优化设置随机数种子。
3. 优化窗口随机位置生成算法。
4. 已知问题: BOCHS运行30分钟左右texture抛出超界异常。
初步断定与负位置绘制有关。(修改后不再出现)。
应该是有个变量前后引用不一致造成。
5. 握草这两天虚拟机总坑我，搞出一些莫名其妙我完全
无法理解的问题，害我心力交瘁调试好久最后
吃个饭玩会游戏就好了？？？

2016.08.05
1. kernel/wnd/event.bin。
2. bochs的时序太快了，内存用光浑然未觉。
一直纳闷为什么alloc_memory0会影响系统运行。
3. 完成基于事件驱动的窗口管理器。
4. 写完了！

2016.08.06
1. CreateProcess问题:
为了方便，编写窗口管理器时我直接在窗口管理器中
创建了几个窗口应用程序。顺序创建没什么问题,如果
在创建每个进程前加上数百毫秒的睡眠。DESKTOP进程异常。
关于这个进程:
开机一定时间后它进入正式工作状态。
一定时间一直等待窗口管理器发送的工作命令。
它的工作是绘制桌面背景，所有窗口，可绘制区和叠加层。
异常在此期间抛出。
为了方便，我使用ds/es同时指向桌面texture。
每次刷新屏幕都有一个重绘和释放的过程和几十毫秒的睡眠。
释放时我是用ds传递目标段。(接口要求),释放后ds被
自动置为NUL_SEL; es仍然指向之前的内存区域。
这些都不是重点。重点是后面(紧接着)的睡眠动作。
在系统中，睡眠意味着主动申请任务切换。通用寄存器和
选择器将会被备份至tss以便从睡眠恢复。恢复任务(
从别的任务切换)，处理器从tss加载通用寄存器和段选择器
的内容，并做有效性和特权级检查。一般情况下，即使es
所指向的描述符被修改(释放内存后对应的描述符槽将不再被信任,
它任何时候可能被其他任务使用)，任务切换也不会有问题。
除非:
一、描述符的特权级发生改变。
二、描述符的类型发生改变。
这异常就属于第二种情况。解决方案很简单，释放内存后
同时把es置零即可。但最好还是避免使用gdt，做好描述符分区。
创建进程前不使用睡眠指令该异常不会发生，因为不使用
睡眠创建几个任务还是很快的，创建完成DESKTOP的工作可能还没开始。
去掉DESKTOP进程的睡眠指令该异常也不会发生，因为es从释放
到重新获得内存期间只有很短的指令执行周期，这期间发生强制
任务切换的机率很小。还有，这个异常在BOCHS中不发生，
大概是由于BOCHS的时钟很快，指令执行速度又太慢吧^^。
心得是: 释放内存后，一定要把指向它的所有选择器置零。
2. 这个操作系统已经开发完成了，整理代码后, 添加功能,
编写应用程序。
３.我才不想写呢！。

2016.08.07
1.
